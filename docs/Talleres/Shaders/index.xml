<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computacion Visual 2022-I</title><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/</link><description>Recent content on Computacion Visual 2022-I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://icquirogac.github.io/showcase/docs/Talleres/Shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Ejercicios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Ejercicios/</guid><description>Procedural texturing # Introducción # El desarrollo de este taller tiene como objetivo familiarizarse con el uso de shaders
Contexto # En este ejercicio se busca implementar otras herramientas de brillo de color ( coloring brightness ), tales como el valor V de HSV, la luminosidad L de HSL y el promedio de componentes, teniendo como punto de partida el codigo brindado por el profesor en la pagina del curso.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Image-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Image-Processing/</guid><description>Image Processing # Contexto # Aplicar sobre una zona el kernel seleccionado, o aplicar un kernel personalizado sobre una imagen o un video
Resultados y Código (Solución) # Deslice el mouse sobre el canvas para aplicar el shader en la zona. En la esquina superior derecha puede ajustar el kernel. En la esquina superior derecha puede seleccionar entre la imagen y el video. imgprocess.js let image; let video; let videoCheck; let maskOption; let shaderMask; let mask = [0, -1, 0, -1, 5, -1, 0, -1, 0] let input = [9]; let button; let selectorFigure; function preload() { video = createVideo([&amp;#39;/showcase/sketches/imgprocess/dogs.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Procedural-texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Procedural-texturing/</guid><description>Texture sampling - coloring brightness # Introducción # El desarrollo de este taller tiene como objetivo familiarizarse con el uso de shaders
Contexto # En este ejercicio se busca implementar un algoritmo el cual permita crear un patron el cual pueda ser asignada como textura a una figura.
A continuación se muestra un patron similar al de una pared de ladrillos donde cada subregión es pintada.
Resultados y Código (Solución) # pattern let pg; let truchetShader; let colorS; function preload() { // shader adapted from here: https://thebookofshaders.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Texturing/</guid><description>Texturing # Introducción # El desarrollo de este taller tiene como objetivo familiarizarse con el uso de shaders
Contexto # Se desea aplicar un shader con una figura en especifico definiendo cada vertice de la figura a que posicion (u,v) del shader se debera aplicar
Resultados y Código (Solución) # Deslice el mouse sobre el canvas para aplicar el shader en la zona. Con el Mouse Wheeler puede cambiar el tamaño del shader aplicado.</description></item></channel></rss>
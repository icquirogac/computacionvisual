<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Computacion Visual 2022-I</title><link>https://icquirogac.github.io/showcase/</link><description>Recent content in Introduction on Computacion Visual 2022-I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://icquirogac.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Actividades/Solidos_Platonicos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Actividades/Solidos_Platonicos/</guid><description>Sólidos Platónicos # Con el proposito de familiarizarse con el uso de la plantilla y P5.js, se implementa el sólido platónico Octaedro, logrando el siguiente resultado.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Ilusiones/Masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Ilusiones/Masking/</guid><description>Masking - Image Kernel # Introducción # Image Processing o procesamiento digital de imagenes, es el producto de utilizar un kernel, matriz de convolucion o mascara, para el desenfoque, enfoque, realce, detección de bordes, entre otros.
Contexto # El proceso de aplicar una mascara sobre una imagen, consta en modificar el valor de cada pixel de la imagen, tomando informacion de los pixeles que la rodean, dependiendo del kernel se da prioridad a ciertos pixeles sobre otro, se pueden lograr efectos diferentes sobre la imagen modificando el kernel.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Ilusiones/Stepping_Feet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Ilusiones/Stepping_Feet/</guid><description>&amp;ldquo;Stepping Feet&amp;rdquo; Motion Illusion # Introducción # Stepping Feet o ilusion de los pies escalonadoes es un fenomeno de percepcion de movimiento en el cual se observa el movimiento de dos bloques un azul y otro amarillo. Los bloques parecen caminar alternativamente. El movimiento es más pronunciado si no se miran directamente los bloques, sino entre ellos. Aunque parecen ser pies dando pasos, en realidad su movimiento es siempre simultáneo.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Rendering/Anti-aliasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Rendering/Anti-aliasing/</guid><description>Anti-aliasing # Introducción # Con el siguinte taller se busca revisar los conceptos de coordenadas baricentricas, rasterización y aliasing al realizar una implementación del suavizado o antiescalinamiento(anti-aliasing) en p5.
Contexto # El antialiasing es una técnica utilizada en gráficos por computadora para eliminar el efecto de aliasing. Este efecto consiste en la aparición de bordes irregulares o &amp;ldquo;jaggies&amp;rdquo; en una imagen rasterizada (una imagen renderizada usando píxeles). El problema de los bordes irregulares técnicamente ocurre debido a la distorsión de la imagen cuando la conversión del escaneo se realiza con muestreo a baja frecuencia, el cual resulta en la pérdida de información de la imagen.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Scene-Trees/Main_Spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Scene-Trees/Main_Spaces/</guid><description>Main Spaces # Introducción # El desarrollo de este taller tiene como objetivo implementar una herramienta de dibujo 3D, apoyandonos en el uso de librerias tales como p5.treegl, p5.EasyCam y ml5.js
Contexto # Teniendo como punto de partida el codigo que el profesor nos brindo en la pagina del curso e integrandolo con una libreria como ml5.js, desarrollamos una herramienta la cual permite dibujar en una interfaz 3D, adicionalmente es capaz de leer ciertos gestos con la mano, dependiendo del gesto detectado se puede cambiar ciertas configuraciones a la hora de dibujar</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Ejercicios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Ejercicios/</guid><description>Texture sampling - coloring brightness # Introducción # El desarrollo de este taller tiene como objetivo familiarizarse con el uso de shaders
Contexto # En este ejercicio se busca implementar otras herramientas de brillo de color ( coloring brightness ), tales como el valor V de HSV, la luminosidad L de HSL y el promedio de componentes, teniendo como punto de partida el codigo brindado por el profesor en la pagina del curso.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Image-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Image-Processing/</guid><description>Image Processing # Contexto # Aplicar sobre una zona el kernel seleccionado, o aplicar un kernel personalizado sobre una imagen o un video
Resultados y Código (Solución) # Deslice el mouse sobre el canvas para aplicar el shader en la zona. En la esquina superior derecha puede ajustar el kernel. En la esquina superior derecha puede seleccionar entre la imagen y el video. imgprocess.js let image; let video; let videoCheck; let maskOption; let shaderMask; let mask = [0, -1, 0, -1, 5, -1, 0, -1, 0] let input = [9]; let button; let selectorFigure; function preload() { video = createVideo([&amp;#39;/showcase/sketches/imgprocess/dogs.</description></item><item><title/><link>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icquirogac.github.io/showcase/docs/Talleres/Shaders/Texturing/</guid><description>Texturing # Introducción # El desarrollo de este taller tiene como objetivo familiarizarse con el uso de shaders
Contexto # Se desea aplicar un shader con una figura en especifico definiendo cada vertice de la figura a que posicion (u,v) del shader se debera aplicar
Resultados y Código (Solución) # Deslice el mouse sobre el canvas para aplicar el shader en la zona. Con el Mouse Wheeler puede cambiar el tamaño del shader aplicado.</description></item></channel></rss>